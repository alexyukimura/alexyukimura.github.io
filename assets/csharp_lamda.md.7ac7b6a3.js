import{_ as a,o as n,c as l,N as p}from"./chunks/framework.295b9ee3.js";const i=JSON.parse('{"title":"Unity中的C# Lambda表达式","description":"","frontmatter":{},"headers":[],"relativePath":"csharp/lamda.md","lastUpdated":null}'),o={name:"csharp/lamda.md"};function e(t,s,c,r,D,F){return n(),l("div",null,s[0]||(s[0]=[p(`<h1 id="unity中的c-lambda表达式" tabindex="-1">Unity中的C# Lambda表达式 <a class="header-anchor" href="#unity中的c-lambda表达式" aria-label="Permalink to &quot;Unity中的C# Lambda表达式&quot;">​</a></h1><p>Lambda表达式是C#中一种简洁的匿名函数写法，在Unity开发中可以大大简化代码。本文将介绍Lambda在Unity中的常见用法。</p><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><p>Lambda表达式的基本格式：</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数列表</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> 表达式或语句块 </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>示例：</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 无参数Lambda</span></span>
<span class="line"><span style="color:#FFCB6B;">Action</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">action</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> Debug</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello Lambda</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 带参数Lambda</span></span>
<span class="line"><span style="color:#FFCB6B;">Func</span><span style="color:#89DDFF;">&lt;int,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">int&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">square</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="在unity中的常见应用" tabindex="-1">在Unity中的常见应用 <a class="header-anchor" href="#在unity中的常见应用" aria-label="Permalink to &quot;在Unity中的常见应用&quot;">​</a></h2><h3 id="_1-简化委托" tabindex="-1">1. 简化委托 <a class="header-anchor" href="#_1-简化委托" aria-label="Permalink to &quot;1. 简化委托&quot;">​</a></h3><p>传统委托写法：</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">button</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onClick</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddListener</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">delegate</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Debug</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Button clicked</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p>使用Lambda简化：</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">button</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onClick</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddListener</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> Debug</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Button clicked</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-事件处理" tabindex="-1">2. 事件处理 <a class="header-anchor" href="#_2-事件处理" aria-label="Permalink to &quot;2. 事件处理&quot;">​</a></h3><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 传统事件订阅</span></span>
<span class="line"><span style="color:#A6ACCD;">someEvent </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> HandleEvent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HandleEvent</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EventArgs</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*...*/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用Lambda简化</span></span>
<span class="line"><span style="color:#A6ACCD;">someEvent </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*...*/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-linq查询" tabindex="-1">3. LINQ查询 <a class="header-anchor" href="#_3-linq查询" aria-label="Permalink to &quot;3. LINQ查询&quot;">​</a></h3><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 查找所有血量低于30%的敌人</span></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">weakEnemies</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> enemies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Where</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Health </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MaxHealth </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3f</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 按距离排序</span></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sorted</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> enemies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OrderBy</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> Vector3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Distance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Position</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> player</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Position</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-协程中的使用" tabindex="-1">4. 协程中的使用 <a class="header-anchor" href="#_4-协程中的使用" aria-label="Permalink to &quot;4. 协程中的使用&quot;">​</a></h3><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">StartCoroutine</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">WaitAndDo</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 等待2秒后执行的代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    Debug</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2秒后执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2f</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">IEnumerator</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WaitAndDo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Action</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">action</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">delay</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WaitForSeconds</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">delay</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">action</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li>避免在频繁调用的地方使用复杂Lambda，可能影响性能</li><li>注意闭包捕获的变量可能带来的内存泄漏问题</li><li>对于需要多次调用的逻辑，考虑使用传统方法更清晰</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Lambda表达式能让Unity代码更简洁，特别是在事件处理、委托和LINQ查询等场景中非常有用。但要合理使用，避免过度简化影响可读性。</p>`,23)]))}const C=a(o,[["render",e]]);export{i as __pageData,C as default};
