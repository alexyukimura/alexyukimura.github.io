import{_ as n,o as a,c as l,N as p}from"./chunks/framework.295b9ee3.js";const C=JSON.parse('{"title":"使用 Jenkins Pipeline 集成 Unity 打包","description":"","frontmatter":{},"headers":[],"relativePath":"guide/unity/pack/jekins.md","lastUpdated":null}'),e={name:"guide/unity/pack/jekins.md"};function o(t,s,i,r,c,y){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="使用-jenkins-pipeline-集成-unity-打包" tabindex="-1">使用 Jenkins Pipeline 集成 Unity 打包 <a class="header-anchor" href="#使用-jenkins-pipeline-集成-unity-打包" aria-label="Permalink to &quot;使用 Jenkins Pipeline 集成 Unity 打包&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>Jenkins 是一款流行的开源持续集成与持续交付（CI/CD）工具，而 Jenkins Pipeline 允许用户以代码形式定义整个构建、测试和部署流程。在 Unity 项目开发中，借助 Jenkins Pipeline 可以实现自动化打包，提高开发效率，确保构建过程的一致性。</p><h2 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h2><h3 id="_1-安装-jenkins" tabindex="-1">1. 安装 Jenkins <a class="header-anchor" href="#_1-安装-jenkins" aria-label="Permalink to &quot;1. 安装 Jenkins&quot;">​</a></h3><p>首先需要在服务器上安装 Jenkins，不同操作系统的安装方式不同，可参考 <a href="https://www.jenkins.io/doc/book/installing/" target="_blank" rel="noreferrer">Jenkins 官方安装文档</a> 进行安装。</p><h3 id="_2-安装必要插件" tabindex="-1">2. 安装必要插件 <a class="header-anchor" href="#_2-安装必要插件" aria-label="Permalink to &quot;2. 安装必要插件&quot;">​</a></h3><p>在 Jenkins 管理界面的“插件管理”中，安装以下插件：</p><ul><li><strong>Git 插件</strong>：用于从 Git 仓库拉取 Unity 项目代码。</li><li><strong>Unity 3D 插件</strong>：提供 Unity 相关的构建步骤。</li></ul><h3 id="_3-配置-unity-路径" tabindex="-1">3. 配置 Unity 路径 <a class="header-anchor" href="#_3-配置-unity-路径" aria-label="Permalink to &quot;3. 配置 Unity 路径&quot;">​</a></h3><p>在 Jenkins 全局工具配置中，设置 Unity 编辑器的安装路径，让 Jenkins 能够找到 Unity 可执行文件。</p><h2 id="创建-jenkins-pipeline" tabindex="-1">创建 Jenkins Pipeline <a class="header-anchor" href="#创建-jenkins-pipeline" aria-label="Permalink to &quot;创建 Jenkins Pipeline&quot;">​</a></h2><h3 id="_1-新建-pipeline-项目" tabindex="-1">1. 新建 Pipeline 项目 <a class="header-anchor" href="#_1-新建-pipeline-项目" aria-label="Permalink to &quot;1. 新建 Pipeline 项目&quot;">​</a></h3><p>在 Jenkins 首页，点击“新建任务”，输入任务名称，选择“流水线”类型，然后点击“确定”。</p><h3 id="_2-编写-pipeline-脚本" tabindex="-1">2. 编写 Pipeline 脚本 <a class="header-anchor" href="#_2-编写-pipeline-脚本" aria-label="Permalink to &quot;2. 编写 Pipeline 脚本&quot;">​</a></h3><p>在项目配置页面的“流水线”部分，选择“Pipeline 脚本”，以下是一个简单的 Unity 打包 Pipeline 脚本示例：</p><div class="language-groovy"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pipeline {</span></span>
<span class="line"><span style="color:#A6ACCD;">    agent any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    stages {</span></span>
<span class="line"><span style="color:#A6ACCD;">        stage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Checkout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            steps {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// 从 Git 仓库拉取代码</span></span>
<span class="line"><span style="color:#A6ACCD;">                git </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://github.com/your-repo/your-unity-project.git</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        stage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Unity Build</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            steps {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// 执行 Unity 打包命令</span></span>
<span class="line"><span style="color:#A6ACCD;">                unityBuilder</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">unityPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/Applications/Unity/Hub/Editor/2021.3.10f1/Unity.app/Contents/MacOS/Unity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">projectPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">buildTarget</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Android</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">buildMethod</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BuildScript.BuildAndroid</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">outputPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">builds/android</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        stage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Archive Artifacts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            steps {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// 归档打包产物</span></span>
<span class="line"><span style="color:#A6ACCD;">                archiveArtifacts </span><span style="color:#FFCB6B;">artifacts</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">builds/android/*.apk</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    post {</span></span>
<span class="line"><span style="color:#A6ACCD;">        success {</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// 构建成功发送通知</span></span>
<span class="line"><span style="color:#A6ACCD;">            echo </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Unity 打包成功！</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        failure {</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// 构建失败发送通知</span></span>
<span class="line"><span style="color:#A6ACCD;">            echo </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Unity 打包失败，请检查日志。</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="脚本解释" tabindex="-1">脚本解释 <a class="header-anchor" href="#脚本解释" aria-label="Permalink to &quot;脚本解释&quot;">​</a></h2><ul><li><strong>agent any</strong>：表示该 Pipeline 能在任意可用的 Jenkins 节点上执行。</li><li><strong>Checkout 阶段</strong>：借助 <code>git</code> 命令从指定的 Git 仓库拉取 Unity 项目代码。</li><li><strong>Unity Build 阶段</strong>：运用 <code>unityBuilder</code> 步骤调用 Unity 进行打包，需指定 Unity 路径、项目路径、构建目标平台、构建方法和输出路径。</li><li><strong>Archive Artifacts 阶段</strong>：使用 <code>archiveArtifacts</code> 步骤对打包生成的 APK 文件进行归档，便于后续下载。</li><li><strong>post 部分</strong>：依据构建结果输出对应的通知信息。</li></ul><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><h3 id="_1-构建方法" tabindex="-1">1. 构建方法 <a class="header-anchor" href="#_1-构建方法" aria-label="Permalink to &quot;1. 构建方法&quot;">​</a></h3><p>在 Unity 项目里要创建一个静态方法作为构建入口，例如上述脚本中的 <code>BuildScript.BuildAndroid</code>。示例代码如下：</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> UnityEditor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> UnityEngine</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BuildScript</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BuildAndroid</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">scenes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Assets/Scenes/GameScene.unity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">        BuildPipeline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BuildPlayer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">scenes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">builds/android/YourGame.apk</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> BuildTarget</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Android</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> BuildOptions</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">None</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="注意事项-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><h3 id="_2-权限问题" tabindex="-1">2. 权限问题 <a class="header-anchor" href="#_2-权限问题" aria-label="Permalink to &quot;2. 权限问题&quot;">​</a></h3><p>确保 Jenkins 用户对项目目录和输出目录有读写权限，否则可能导致构建失败。</p><h3 id="_3-依赖管理" tabindex="-1">3. 依赖管理 <a class="header-anchor" href="#_3-依赖管理" aria-label="Permalink to &quot;3. 依赖管理&quot;">​</a></h3><p>若 Unity 项目依赖第三方插件或包，需在 Pipeline 中添加相应的依赖安装步骤，以保证构建环境完整。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过 Jenkins Pipeline 集成 Unity 打包，可实现自动化构建流程，减少人工操作，提高开发效率。同时，借助 Jenkins 丰富的插件和功能，还能进一步扩展持续集成和持续交付能力，如自动化测试、部署到应用商店等。</p>`,30)]))}const A=n(e,[["render",o]]);export{C as __pageData,A as default};
